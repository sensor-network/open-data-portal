{
  "openapi": "3.0.0",
  "info": {
    "title": "Sensor Network - Open Data Portal API",
    "description": "The API for fetching data about the Karlskrona Archipelago's water quality",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Developer Server"
    }
  ],
  "paths": {
    "/upload": {
      "post": {
        "tags": [
          "Upload new data"
        ],
        "summary": "Uploads a new set of measurements to the database",
        "description": "Uploads a new set of measurements to the database",
        "operationId": "uploadMeasurements",
        "parameters": [
          {
            "name": "api_key",
            "in": "query",
            "description": "An API key is required in order to post data. These are not available to the public. If you feel like you are entitled one, please contact us and we'll look into it.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "default"
            }
          }
        ],
        "requestBody": {
          "description": "Posting data to the API in order to upload it to the database requires the JSON body to follow the following schema. You can provide multiple measurements at once simply by providing multiple `Measurement`-objects in the array. Note that all objects has to be a valid input for the request to be successful. Temperature can be supplied as `K`- kelvin, `C`- celsius and `F` - fahrenheit. Conductivity can be supplied as variations of `Spm`- Siemens per metre, `mhopm`- mho per metre, `ppm`- parts per million.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Measurement"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The data uploaded to the database. The data will be converted from the units provided to their respective SI unit (timestamp in UTC+0). The result of the conversions are shown in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UploadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON-body could not be parsed correctly. Response JSON contains information what could not be parsed, either the entire form - eg. a required field is missing or an unknown field is specified (specified in field `formErrors`) or a specific field - eg. supplied unit is not supported (specified in `fieldErrors`).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "formErrors": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Expected array, received object"
                      }
                    },
                    "fieldErrors": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Your request could not be verified. You either didn't supply an API key or it was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "The provided API key could not be verified."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed. The endpoint only accepts POST-requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method GET is not allowed for this endpoint."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being uploaded successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error uploading data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/temperature":{
      "get": {
        "tags": [
          "Fetch by data-type"
        ],
        "summary": "Gets a list of temperatures along with the date when it was taken",
        "description": "Retrieves a JSON array with objects containing the temperature along with the date in the UTC timezone",
        "operationId": "getTemperature",
        "parameters": [
          {
            "name": "unit",
            "in": "query",
            "description": "Optional. Sends the temperature based on what the unit is. Available units are `K`, `k`, `C`, `c`, `F` and `f`. If no unit is given, then the temperature unit is Kelvin",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemperatureResponse"
                  }
                }
              }          
            }
          },
          "400": {
            "description": "If the `unit` parameter receives a value other than the available units mentioned above",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Provided temperature unit is not supported. Read the documentation for valid parameters."
                    }
                  }
                }
              }
            }
          },
          "405":{
            "description": "Method not allowed. The endpoint only accepts GET-requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method POST is not allowed for this endpoint"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/ph":{
      "get": {
        "tags": [
          "Fetch by data-type"
        ],
        "summary": "Gets a list of pH values along with the date when it was taken",
        "description": "Retrieves a JSON object with the property `content` which consists of an array with objects containing the pH value along with the date",
        "operationId": "getpH",
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pHResponse"
                  }
                }
              }
            }
          },
          "405":{
            "description": "Method not allowed. The endpoint only accepts GET-requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "formErrors": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Expected array, received object"
                      }
                    },
                    "fieldErrors": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conductivity":{
      "get": {
        "tags": [
          "Fetch by data-type"
        ],
        "summary": "Gets a list of conductivity-values along with the date when the measurement was taken",
        "description": "Retrieves a JSON array with objects containing the conductivity along with the date. All dates are in UTC timezone",
        "operationId": "getConductivity",
        "parameters": [
          {
            "name": "unit",
            "in": "query",
            "description": "Optional. Sends the temperature based on what the unit is. Available units are (most of which are derived from Siemens per meter (milli/micro, meter/centimeters etc)) `Spm`, `S/m`, `mhopm`, `mho/m`, `mSpm`, `mS/m`, `uSpm`, `uS/m`, `Spcm`, `S/cm`, `mhopmc`, `mho/cm`, `mSpcm`, `mS/cm`, `uSpcm`, `uS/cm`, `ppm` and `PPM`. The default unit is Siemens per meter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "uSpcm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConductivityResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the `unit` parameter receives a value other than the available units mentioned above",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Provided conductivity unit 'ohm' is not supported. Read the documentation for valid parameters."
                    }
                  }
                }
              }
            }
          },
          "405":{
            "description": "Method not allowed. The endpoint only accepts GET-requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method POST is not allowed for this endpoint"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/":{
      "get": {
        "tags": [
          "Fetch generic data"
        ],
        "summary": "Gets a list of all data",
        "description": "Retrieves a JSON object with the property `content` which consists of an array with objects containing all the data in the UTC timezone",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "tempunit",
            "in": "query",
            "description": "Optional. Sends the temperature based on what the unit is. Available units are `K`, `k`, `C`, `c`, `F` and `f`. If no unit is given, then the temperature unit is Kelvin",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "C"
            }
          },
          {
            "name": "conductunit",
            "in": "query",
            "description": "Optional. Sends the conductivity based on what the unit is. Available units are `Spm`, `mhopm`, `mSpm`, `uSpm`, `Spcm`, `mhopcm`, `mSpcm`, `uSpcm`, `PPM`, and `ppm`. If no unit is given, then the conductivity unit is Spm",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "ppm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json":{
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dataResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the `tempunit` or the `conductunit` parameter receives a value other than the available units mentioned above",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "One of the provided units is not supported. Read the documentation for valid parameters."
                    }
                  }
                }
              }
            }
          },
          "405":{
            "description": "Method not allowed. The endpoint only accepts GET-requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method POST is not allowed for this endpoint"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bylocation": {
      "get": {
        "tags": ["Fetch generic data"],
        "summary": "Outputs measurements for a given location",
        "description": "Queries database and selects all given measurments avaiable at user-specified location. Location is specified with the query parameters 'long', 'lat', 'rad' in the SRID 4326 system.",
        "operationId": "getLocationData",
        "parameters": [
          {
            "name": "long",
            "in": "query",
            "description": "stands for longitude, ranges from -180 to 180 degrees.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "15.845884248605415"
            }
          },
          {
            "name": "lat",
            "in": "query",
            "description": "stands for latitude, ranges from -90 to 90 degrees.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "56.00694388528538"
            }
          },
          {
            "name": "rad",
            "in": "query",
            "description": "stands for radius, defaults to 200 meters.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationContent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "client server error prevented the data from being parsed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error parsing query params"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/date": {
      "get": {
        "tags": [
          "Fetch generic data"
        ],
        "summary": "Gets all data between two time intervals",
        "description": "Retrieves a JSON array with objects containing all the data within the given time interval. The data is ordered by the date in UTC.",
        "operationId": "getDate",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Required. The start date for the time interval. The only accepted format is YYYY-MM-DD",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2019-05-31"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Required. The end date for the time interval. The only accepted format is YYYY-MM-DD",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2019-08-25"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dataResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the parameters are omitted or are not in the correct format YYYY-MM-DD.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid parameters. Please, read the documentation for valid parameters."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method POST is not allowed for this endpoint"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Fetch generic data"
        ],
        "summary": "Gets all data between two time intervals",
        "description": "Retrieves a JSON array with objects containing all the available locations.",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "name",
            "in": "query",
          "description": "Optional. Name of location.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "Gräsvik"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data is successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationName"
                  }
                }
              }
            }
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Method POST is not allowed for this endpoint"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error prevented the data from being fetched successfully. Please submit an Issue at the official Github repo.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error fetching data from the database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Measurement": {
        "required": [
          "UTC_offset",
          "latitude",
          "longitude",
          "sensors",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-12 15:12:34"
          },
          "UTC_offset": {
            "type": "number",
            "format": "integer",
            "example": 2
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 56.16082
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": 15.58671
          },
          "sensors": {
            "$ref": "#/components/schemas/Sensors"
          }
        },
        "description": "The given contract to upload data to the database."
      },
      "Sensors": {
        "minProperties": 1,
        "type": "object",
        "properties": {
          "temperature": {
            "type": "number",
            "format": "float",
            "example": 20.6
          },
          "temperature_unit": {
            "type": "string",
            "example": "C"
          },
          "conductivity": {
            "type": "number",
            "format": "float",
            "example": 4.8
          },
          "conductivity_unit": {
            "type": "string",
            "example": "Spm"
          },
          "ph_level": {
            "type": "number",
            "format": "float",
            "example": 7.1
          }
        },
        "description": "At least one of the value-properties should be supplied. Supplying only a unit will throw an error. Units defaults to their SI-representative if not specified."
      },
      "UploadResponse": {
        "required": [
          "latitude",
          "longitude",
          "sensors",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-22 13:12:34"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 56.16082
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": 15.58671
          },
          "sensors": {
            "$ref": "#/components/schemas/UploadResponse_sensors"
          }
        },
        "description": "The response objects from the `upload` endpoint. All data is converted to SI units (timestamp is in UTC+0), which is how they are stored in the database."
      },
      "TemperatureResponse": {
        "type": "object",
        "properties": {
          "temperature": {
            "type": "number",
            "format": "float",
            "example": "289.03"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2007-12-11T18:05:11.000Z"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 56.16082
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": 15.58671
          }
        },
        "description": "The response from \"GET: / temperature\"-endpoint."
      },
      "getDate": {
        "$ref": "#/components/schemas/dataResponse",
        "description": "The response from \"GET: / temperature\"-endpoint."
      },
      "pHResponse": {
        "type": "object",
        "properties": {
          "pH": {
            "type": "number",
            "format": "float",
            "example": "5.09"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2017-08-16T20:19:44.000Z"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 56.16082
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": 15.58671
          }
        },

        "description": "The response from `GET: / pH`-endpoint."
      },
      "ConductivityResponse": {
        "type": "object",
        "properties": {
          "conductivity": {
            "type": "number",
            "format": "float",
            "example": "0.043"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-15T10:44:00.000Z"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": 56.16082
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": 15.58671
          }
        },
        "description": "The response from `GET: /conductivity`-endpoint."
      },
      "dataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "integer",
            "example": "542"
          },
          "pH": {
            "type": "number",
            "format": "float",
            "example": "7.14"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "example": "289.03"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2007-12-11T18:05:11.000Z"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": "15.845884248605417"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": "56.00694388528538"
          }
        }
      },
      "UploadResponse_sensors": {
        "type": "object",
        "properties": {
          "temperature": {
            "type": "number",
            "format": "float",
            "example": 293.75
          },
          "conductivity": {
            "type": "number",
            "format": "float",
            "example": 4.8
          },
          "ph_level": {
            "type": "number",
            "format": "float",
            "example": 7.1
          }
        }
      },
      "LocationContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "int",
            "example": "2"
          },
          "pH": {
            "type": "number",
            "format": "float",
            "example": "7.56"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "example": "14.3"
          },
          "conductivity": {
            "type": "number",
            "format": "float",
            "example": "4.88"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-16T20:19:44.000Z"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": "15.845884248605417"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": "56.00694388528538"
          },
          "distance in meters": {
            "type": "number",
            "format": "float",
            "example": "253.35262336326636"
          }
        },
        "description": "The response from \"GET: / bylocation\"-endpoint."
      },
      "LocationName": {
        "type": "object",
        "properties": {
          "radius": {
            "type": "number",
            "format": "float",
            "example": 300
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "example": "15.845884248605417"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "example": "56.00694388528538"
          }
        }
      }
    }
  }
}
